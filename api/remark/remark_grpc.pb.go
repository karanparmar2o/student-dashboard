// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/remark/remark.proto

package remark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RemarkService_AddRemark_FullMethodName            = "/remark.RemarkService/AddRemark"
	RemarkService_GetRemarksForStudent_FullMethodName = "/remark.RemarkService/GetRemarksForStudent"
	RemarkService_ApproveRemark_FullMethodName        = "/remark.RemarkService/ApproveRemark"
)

// RemarkServiceClient is the client API for RemarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemarkServiceClient interface {
	AddRemark(ctx context.Context, in *AddRemarkRequest, opts ...grpc.CallOption) (*AddRemarkResponse, error)
	GetRemarksForStudent(ctx context.Context, in *GetRemarksForStudentRequest, opts ...grpc.CallOption) (*GetRemarksForStudentResponse, error)
	ApproveRemark(ctx context.Context, in *ApproveRemarkRequest, opts ...grpc.CallOption) (*ApproveRemarkResponse, error)
}

type remarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemarkServiceClient(cc grpc.ClientConnInterface) RemarkServiceClient {
	return &remarkServiceClient{cc}
}

func (c *remarkServiceClient) AddRemark(ctx context.Context, in *AddRemarkRequest, opts ...grpc.CallOption) (*AddRemarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRemarkResponse)
	err := c.cc.Invoke(ctx, RemarkService_AddRemark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkServiceClient) GetRemarksForStudent(ctx context.Context, in *GetRemarksForStudentRequest, opts ...grpc.CallOption) (*GetRemarksForStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRemarksForStudentResponse)
	err := c.cc.Invoke(ctx, RemarkService_GetRemarksForStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkServiceClient) ApproveRemark(ctx context.Context, in *ApproveRemarkRequest, opts ...grpc.CallOption) (*ApproveRemarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveRemarkResponse)
	err := c.cc.Invoke(ctx, RemarkService_ApproveRemark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemarkServiceServer is the server API for RemarkService service.
// All implementations must embed UnimplementedRemarkServiceServer
// for forward compatibility.
type RemarkServiceServer interface {
	AddRemark(context.Context, *AddRemarkRequest) (*AddRemarkResponse, error)
	GetRemarksForStudent(context.Context, *GetRemarksForStudentRequest) (*GetRemarksForStudentResponse, error)
	ApproveRemark(context.Context, *ApproveRemarkRequest) (*ApproveRemarkResponse, error)
	mustEmbedUnimplementedRemarkServiceServer()
}

// UnimplementedRemarkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemarkServiceServer struct{}

func (UnimplementedRemarkServiceServer) AddRemark(context.Context, *AddRemarkRequest) (*AddRemarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemark not implemented")
}
func (UnimplementedRemarkServiceServer) GetRemarksForStudent(context.Context, *GetRemarksForStudentRequest) (*GetRemarksForStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemarksForStudent not implemented")
}
func (UnimplementedRemarkServiceServer) ApproveRemark(context.Context, *ApproveRemarkRequest) (*ApproveRemarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveRemark not implemented")
}
func (UnimplementedRemarkServiceServer) mustEmbedUnimplementedRemarkServiceServer() {}
func (UnimplementedRemarkServiceServer) testEmbeddedByValue()                       {}

// UnsafeRemarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemarkServiceServer will
// result in compilation errors.
type UnsafeRemarkServiceServer interface {
	mustEmbedUnimplementedRemarkServiceServer()
}

func RegisterRemarkServiceServer(s grpc.ServiceRegistrar, srv RemarkServiceServer) {
	// If the following call pancis, it indicates UnimplementedRemarkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RemarkService_ServiceDesc, srv)
}

func _RemarkService_AddRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkServiceServer).AddRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkService_AddRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkServiceServer).AddRemark(ctx, req.(*AddRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkService_GetRemarksForStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemarksForStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkServiceServer).GetRemarksForStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkService_GetRemarksForStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkServiceServer).GetRemarksForStudent(ctx, req.(*GetRemarksForStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkService_ApproveRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkServiceServer).ApproveRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkService_ApproveRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkServiceServer).ApproveRemark(ctx, req.(*ApproveRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemarkService_ServiceDesc is the grpc.ServiceDesc for RemarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remark.RemarkService",
	HandlerType: (*RemarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRemark",
			Handler:    _RemarkService_AddRemark_Handler,
		},
		{
			MethodName: "GetRemarksForStudent",
			Handler:    _RemarkService_GetRemarksForStudent_Handler,
		},
		{
			MethodName: "ApproveRemark",
			Handler:    _RemarkService_ApproveRemark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/remark/remark.proto",
}
